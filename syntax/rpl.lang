<?xml version="1.0" encoding="UTF-8"?>
<!--

 Author: Wa <admin@logicplace.com>

-->
<language id="rpl" _name="Resource Replacement" version="2.0" _section="Markup">
	<metadata>
		<property name="globs">*.rpl</property>
		<property name="line-comment-start">#</property>
	</metadata>

	<styles>
		<style id="comment" _name="Comment" map-to="def:comment"/>
		<style id="name" _name="Struct Name" map-to="def:statement"/>
		<style id="struct" _name="Struct Type" map-to="def:type"/>
		<style id="keyword" _name="Keyword" map-to="def:special-constant"/>
		<style id="key" _name="Key Name" map-to="def:builtin"/>
		<style id="number" _name="Number" map-to="def:decimal"/>
		<style id="hex" _name="Hexadecimal" map-to="def:base-n-integer"/>
		<style id="octal" _name="Octal" map-to="def:base-n-integer"/>
		<style id="binary" _name="Binary" map-to="def:base-n-integer"/>
		<style id="base" _name="Misc. Base Number" map-to="def:base-n-integer"/>
		<style id="string" _name="String" map-to="def:string"/>
		<style id="error" _name="Error" map-to="def:error"/>
		<style id="escape" _name="Escaped character" map-to="def:special-char"/>
		<style id="ref" _name="Reference" map-to="def:identifier"/>
	</styles>

	<default-regex-options case-sensitive="false"/>

	<definitions>
		<define-regex id="struct-name">[a-zA-Z_][a-zA-Z_\-0-9]*</define-regex>
		<define-regex id="key-name">[a-z]+[0-9]*</define-regex>
		<define-regex id="type-name">[a-zA-Z_][a-zA-Z_0-9]*</define-regex>

		<context id="escape" style-ref="escape">
			<match>\$(\$|[0-9a-fA-F]{2})</match>
		</context>

		<context id="escape-error" style-ref="error">
			<match>\$(.?[^0-9a-fA-F]|[^$])</match>
		</context>

		<context id="string"><include>
			<context id="string-dq" style-ref="string" end-at-line-end="true" class="string">
				<start>"</start><end>"</end>
				<include>
					<context ref="escape"/>
					<context ref="escape-error"/>
				</include>
			</context>
			<context id="string-sq" style-ref="string" end-at-line-end="true" class="string">
				<start>'</start><end>'</end>
				<include>
					<context ref="escape"/>
					<context ref="escape-error"/>
				</include>
			</context>
		</include></context>

		<context id="mstring" style-ref="string" class="string">
			<start>`</start><end>`</end>
			<include>
				<context ref="escape"/>
				<context ref="escape-error"/>
			</include>
		</context>

		<context id="refstr" style-ref="string" class="string">
			<start>@`</start><end>`</end>
			<include>
				<context ref="escape"/>
				<context ref="escape-error"/>
				<context ref="ref"/>
			</include>
		</context>

		<context id="keywords" style-ref="keyword">
			<keyword>false</keyword>
			<keyword>true</keyword>
			<keyword>black</keyword>
			<keyword>white</keyword>
			<keyword>red</keyword>
			<keyword>blue</keyword>
			<keyword>green</keyword>
			<keyword>yellow</keyword>
			<keyword>magenta</keyword>
			<keyword>pink</keyword>
			<keyword>cyan</keyword>
			<keyword>gray</keyword>
			<keyword>byte</keyword>
			<keyword>short</keyword>
			<keyword>long</keyword>
			<keyword>double</keyword>
			<keyword>LRUD</keyword>
			<keyword>LRDU</keyword>
			<keyword>RLUD</keyword>
			<keyword>RLDU</keyword>
			<keyword>UDLR</keyword>
			<keyword>UDRL</keyword>
			<keyword>DULR</keyword>
			<keyword>DURL</keyword>
			<keyword>LU</keyword>
			<keyword>LD</keyword>
			<keyword>RU</keyword>
			<keyword>RD</keyword>
			<keyword>UL</keyword>
			<keyword>UR</keyword>
			<keyword>DL</keyword>
			<keyword>DR</keyword>
			<keyword>big</keyword>
			<keyword>little</keyword>
		</context>

		<context id="number" style-ref="number">
			<match>(?:[0-9]+|\$[0-9a-fA-F]+|[a-z](?=:))(?:(?:[\-*+~](?:[0-9]+|\$[0-9a-fA-F]+))?:(?:[0-9]+|\$[0-9a-fA-F]+|[a-z](?=[: ,\]}]|$)))*(?:[\-*+~](?:[0-9]+|\$[0-9a-fA-F]+))?</match>
		</context>

		<context id="hexnum" style-ref="hex">
			<match>\$[0-9a-fA-F]+(?![0-9a-fA-F]*[\-:*~+])</match>
		</context>

		<context id="ref" style-ref="ref">
			<match>@\%{struct-name}(?:(?:\.\%{key-name})(?:\[[0-9]+\])*)*</match>
		</context>

		<context id="math" style-ref="string" end-at-line-end="true">
			<!-- Math does not require a + to start it, but this is an easy and okay looking way to identify it.
			Also, if the string starts with a number or reference, you need to do this to make it a literal.
			The other option would be to make it a string, but then the highlighter can't really identify it. -->
			<start>\+(?=[^,\["'}\] \t])</start><end>(?=[#,\]}])</end>
			<include>
				<context ref="ref"/>
				<context ref="hexnum"/>
				<context id="hexnum2" style-ref="hex">
					<match>0x[0-9a-fA-F]+</match>
				</context>
				<context id="octal" style-ref="octal">
					<match>0o?[0-7]+</match>
				</context>
				<context id="binary" style-ref="binary">
					<!-- The match for % for binary is not good, but there isn't much option for gEdit.
					It would be best to just separate the % and number with a space when not meaning binary. -->
					<match>(?:0b|(?&lt;![0-9a-zA-Z])(?&lt;![0-9a-zA-Z] )%)[01]+</match>
				</context>
				<context id="base" style-ref="base">
					<match>[0-9a-zA-Z]+_(?:[12][0-9]|3[0-6]|[2-9])</match>
				</context>
				<context id="badbase" style-ref="error">
					<match>[0-9a-zA-Z]+_[0-9]+</match>
				</context>
				<context ref="number"/>
			</include>
		</context>

		<context id="literal" style-ref="string">
			<match>[^#,\[\]{}():"'\s][^#,\[\]{}():]*</match>
		</context>

		<context id="key">
			<match>(\%{key-name})\s*:</match>
			<include>
				<context style-ref="key" sub-pattern="1"/>
			</include>
		</context>

		<context id="list">
			<start>\[</start><end>\]</end>
			<include>
				<context ref="def:shell-like-comment"/>
				<context ref="list"/>
				<context ref="string"/>
				<context ref="refstr"/>
				<context ref="mstring"/>
				<context ref="hexnum"/>
				<context ref="number"/>
				<context ref="ref"/>
				<context ref="math"/>
				<context ref="literal"/>
			</include>
		</context>

		<context id="struct-contents" end-parent="true">
			<start>\{</start><end>\}</end>
			<include>
				<context ref="def:shell-like-comment"/>
				<context ref="struct"/>
				<context ref="keystruct"/>
				<context ref="key"/>
				<context ref="list"/>
				<context ref="string"/>
				<context ref="refstr"/>
				<context ref="mstring"/>
				<context ref="hexnum"/>
				<context ref="number"/>
				<context ref="ref"/>
				<context ref="math"/>
				<context ref="literal"/>
			</include>
		</context>

		<context id="keystruct-parens" end-parent="true">
			<start>\(</start><end>\)</end>
			<include>
				<context ref="def:shell-like-comment"/>
				<context ref="list"/>
				<context ref="string"/>
				<context ref="refstr"/>
				<context ref="mstring"/>
				<context ref="hexnum"/>
				<context ref="number"/>
				<context ref="ref"/>
				<context ref="math"/>
				<context ref="literal"/>
			</include>
		</context>

		<context id="keystruct-list" end-parent="true">
			<start>\[</start><end>\]</end>
			<include>
				<context ref="def:shell-like-comment"/>
				<context ref="list"/>
				<context ref="string"/>
				<context ref="refstr"/>
				<context ref="mstring"/>
				<context ref="hexnum"/>
				<context ref="number"/>
				<context ref="ref"/>
				<context ref="math"/>
				<context ref="literal"/>
			</include>
		</context>

		<context id="keystruct">
			<start>(\%{key-name}):[ \t]*(\%{type-name})[ \t]*(?=[({\[])</start>
			<include>
				<context style-ref="key" where="start" sub-pattern="1"/>
				<context style-ref="struct" where="start" sub-pattern="2"/>
				<context ref="struct-contents"/>
				<context ref="keystruct-parens"/>
				<context ref="keystruct-list"/>
			</include>
		</context>

		<context id="struct">
			<start>^[ \t]*(\%{type-name})( +\%{struct-name})?[ \t]*(?=$|\{)</start>
			<include>
				<context style-ref="struct" where="start" sub-pattern="1"/>
				<context style-ref="name" where="start" sub-pattern="2"/>
				<context ref="struct-contents"/>
			</include>
		</context>

		<context id="rpl" class="no-spell-check">
			<include>
				<context ref="def:shell-like-comment"/>
				<context ref="struct"/>
			</include>
		</context>
	</definitions>
</language>
